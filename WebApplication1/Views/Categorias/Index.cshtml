@model Paginacion<Sistema.Models.Categoria>

@{
    ViewData["Title"] = "Index";
}
<br/>
<div class="container-fluid">
    <h2>Categoría de Cursos</h2>
    <!--<a asp-action="Create"><button class="btn btn-default">Agregar</button></a>-->
    <form class="form-inline my-2" asp-action="Index" method="get">
        <div class="form-group">
            <p>
                <a asp-action="Create" class="btn btn-sm">Agregar</a>
                Filtro: <input class="form-control mr-sm-2" type="text" name="searchString" placeholder="Texto" value="@ViewData["CurrentFilter"]" />
                <input type="submit" value="Buscar" class="btn btn-sm" />
                <a asp-action="Index">Ver todos los registros</a> | Registros Mostrados @Model.TotalR
            </p>
        </div>
    </form>
    <table class="table">
        <thead>
            <tr>
                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["NombreSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Nombre</a></th> <!--Enviamos el ordenamiento y la cadena filtro-->
                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["DescripcionSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Descripción</a></th>
                <th>Estado</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Nombre)</td>
                    <td>@Html.DisplayFor(modelItem => item.Descripcion)</td>
                    <td>@Html.DisplayFor(modelItem => item.Estado)</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.CategoriaId">Editar</a> |
                        <a asp-action="Details" asp-route-id="@item.CategoriaId">Detalles</a> |
                        <a asp-action="Delete" asp-route-id="@item.CategoriaId">Eliminar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @{
        // Las siguientes dos lineas ayudan a saber si la page actual tiene los botones anterior/siguiente habilitados o no
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @prevDisabled">
        Anterior
    </a>
    
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-page="@i"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-sm">
            @i
        </a>
    }

    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-page="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @nextDisabled">
        Siguiente
    </a>
</div>